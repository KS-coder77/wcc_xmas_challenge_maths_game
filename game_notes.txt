backend python script to generate questions 

from flask import Flask, jsonify
import random

app = Flask(__name__)

def generate_question():
    """Generates a simple math question and its answer."""
    num1 = random.randint(1, 100)
    num2 = random.randint(1, 100)
    operation = random.choice(['+', '-', '*', '/'])

    if operation == '/':
        # Ensure a clean division question
        num1 = num1 * num2

    question = f"{num1} {operation} {num2}"
    answer = eval(question)

    # Limit answer precision for division
    if operation == '/':
        answer = round(answer, 2)

    return {"question": question, "answer": answer}

@app.route('/api/math-question', methods=['GET'])
def get_math_question():
    """API endpoint to fetch a new math question."""
    question_data = generate_question()
    # Exclude the answer in the response for the user
    return jsonify({"question": question_data["question"]})

@app.route('/api/check-answer', methods=['POST'])
def check_answer():
    """
    API endpoint to check the submitted answer.
    Expects JSON with 'question' and 'user_answer'.
    """
    from flask import request
    data = request.json

    # Validate incoming data
    if not data or 'question' not in data or 'user_answer' not in data:
        return jsonify({"error": "Invalid input"}), 400

    try:
        # Recalculate the correct answer
        correct_answer = eval(data['question'])
        if '/' in data['question']:
            correct_answer = round(correct_answer, 2)

        # Compare with user answer
        is_correct = float(data['user_answer']) == correct_answer
        return jsonify({"is_correct": is_correct, "correct_answer": correct_answer})
    except Exception as e:
        return jsonify({"error": "Error processing the question"}), 500

if __name__ == '__main__':
    app.run(debug=True)


How It Works
API Endpoints:

/api/math-question: Provides a randomly generated math question in JSON format.
/api/check-answer: Accepts a JSON payload with the question and the user's answer, then validates the response.
Question Generation:

Generates a math question with random numbers and one of the operations: addition, subtraction, multiplication, or division.
Answer Validation:

The /api/check-answer endpoint recalculates the correct answer and compares it to the user’s submission.


Front-End Interaction Example
The React-based Java front end can use the fetch API to interact with the backend.


fetching a question 
fetch('http://localhost:5000/api/math-question')
  .then(response => response.json())
  .then(data => {
    console.log('Math Question:', data.question);
  });


submitting an answer
fetch('http://localhost:5000/api/check-answer', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    question: "50 + 25", // Replace with the actual question
    user_answer: "75" // Replace with the user's answer
  })
})
  .then(response => response.json())
  .then(data => {
    if (data.is_correct) {
      console.log('Correct answer!');
    } else {
      console.log(`Incorrect! The correct answer is ${data.correct_answer}.`);
    }
  });

Notes
Dependencies: Install Flask using pip install flask.
CORS Handling: If the React front end and Flask backend are hosted on different domains, you might need to enable CORS using the flask-cors package.
Running the Backend: Start the server with python math_questions_api.py.
Let me know if you’d like the front-end integration explained further!






